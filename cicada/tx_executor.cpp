#include "tx_executor.h"
#include "../common/atomic_wrapper.h"
#include "../common/gen_string.h"

using std::memory_order_acquire;
using std::memory_order_acq_rel;

TXExecutor::TXExecutor(
  uint8_t threadId_, Result *result_)
: result(result_), threadId(threadId_)
{
  while(MinWts.load(memory_order_acquire) == 0){
    ; // wait to initialize MinWts
  }
  /**
   * """
   * (thread.wts) stores the timestamp generated by the above procedure.
   * (thread.rts) stores min_wts minus 1.
   * """
   */
  wts.generateTimeStampFirst(threadId);
  rts = MinWts.load(memory_order_acquire) - 1;

  storeRelease(ThreadWtsArray[threadId].body, wts.body);
  unsigned int expected, desired;
  expected = FirstAllocateTimestamp.load(memory_order_acquire);
  for(;;){
    desired = expected + 1;
    if(FirstAllocateTimestamp.compare_exchange_weak(expected, desired, memory_order_acq_rel)){
      break;
    }
  }

  readSet.reserve(MAX_OPERATIONS);
  writeSet.reserve(MAX_OPERATIONS);
  steps.reserve(MAX_OPERATIONS);

  for(size_t i = 0; i < PRE_RESERVE_VERSION; ++i){
    reuseVersionFromGC.emplace_back(new Version());
  }

  genStringRepeatedNumber(writeValue, VALUE_SIZE, threadId);

  start = rdtscp();
  GCStart = start;

}

TXExecutor::~TXExecutor() {
  for(auto version: reuseVersionFromGC){
    if(version->status == Unused){
      delete version;
    }
  }
  reuseVersionFromGC.clear();
  readSet.clear();
  writeSet.clear();
  GCQueue.clear();
  steps.clear();
}
